- name: Install Java
  apt:
    name: openjdk-17-jdk
    state: present
    update_cache: yes

- name: Add Jenkins repository key
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins.io.key
    state: present

- name: Add Jenkins repository
  apt_repository:
    repo: "deb https://pkg.jenkins.io/debian-stable binary/"
    state: present

- name: Install Jenkins
  apt:
    name: jenkins
    state: present

- name: Ensure Jenkins is running
  systemd:
    name: jenkins
    enabled: yes
    state: started

- name: Allow firewall ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop: [22, 8080]

- name: Enable firewall
  ufw:
    state: enabled
    policy: deny
- name: Download Jenkins CLI tool
  get_url:
    url: http://localhost:8080/jnlpJars/jenkins-cli.jar
    dest: /tmp/jenkins-cli.jar

- name: Wait for Jenkins to be up before installing plugins
  uri:
    url: http://localhost:8080/login
    status_code: 200
  register: jenkins_status
  until: jenkins_status.status == 200
  retries: 30
  delay: 5

- name: Install Jenkins plugins using CLI
  shell: >
    java -jar /tmp/jenkins-cli.jar -s http://localhost:8080 install-plugin {{ item }} -deploy
  loop:
    - ssh-slaves
    - workflow-aggregator
    - matrix-auth
    - blueocean
    - prometheus
  args:
    warn: false

- name: Create directory for init scripts
  file:
    path: /var/lib/jenkins/init.groovy.d
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755

- name: Deploy SSH-based agent auto-registration Groovy script
  copy:
    dest: /var/lib/jenkins/init.groovy.d/agent-ssh.groovy
    content: |
      import jenkins.model.*
      import hudson.plugins.sshslaves.*
      import hudson.slaves.*

      def agentName = "agent1"
      def agentHome = "/home/jenkins"
      def agentHost = "{{ hostvars['agent1']['ansible_host'] }}"
      def sshUser = "jenkins"
      def credentialsId = "agent-ssh-key"

      println "--> Checking for existing agent..."
      def instance = Jenkins.getInstance()
      if (instance.getNode(agentName) == null) {
          println "--> Creating SSH-based agent..."

          def launcher = new SSHLauncher(agentHost, 22, credentialsId)
          def agent = new DumbSlave(
              agentName,
              agentHome,
              launcher
          )
          agent.numExecutors = 1
          agent.labelString = "linux-agent"
          agent.mode = Node.Mode.NORMAL
          agent.retentionStrategy = new RetentionStrategy.Always()

          instance.addNode(agent)
          println "--> Agent created."
      } else {
          println "--> Agent already exists."
      }

- name: Create SSH credentials for agent in Jenkins (Groovy)
  copy:
    dest: /var/lib/jenkins/init.groovy.d/agent-ssh-creds.groovy
    content: |
      import jenkins.model.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.domains.*
      import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
      import hudson.util.Secret

      def instance = Jenkins.getInstance()
      def store = instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      def existing = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
        instance
      ).find { it.id == "agent-ssh-key" }

      if (existing == null) {
        println "--> Creating SSH key credential"

        def privateKey = new BasicSSHUserPrivateKey(
          CredentialsScope.GLOBAL,
          "agent-ssh-key",
          "jenkins",
          new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(
            new File("/home/ubuntu/.ssh/jenkins-key").text
          ),
          null,
          "SSH key for connecting to agent"
        )

        store.addCredentials(Domain.global(), privateKey)
      } else {
        println "--> SSH credential already exists"
      }

  notify: Restart Jenkins
